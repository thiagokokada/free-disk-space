name: "Free Disk Space (Ubuntu)"
description: "A configurable GitHub Action to free up disk space on an Ubuntu GitHub Actions runner."

# See: https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#branding
branding:
  icon: "trash-2"
  color: "green"

inputs:
  android:
    description: "Remove Android runtime"
    required: false
    default: "true"
  az:
    description: "Remove Azure CLI"
    required: false
    default: "true"
  aws-cli:
    description: "Remove AWS CLI"
    required: false
    default: "true"
  browsers:
    description: "Remove Browsers (Chrome, Chromium, Edge and Firefox)"
    required: false
    default: "true"
  gcc:
    description: "Remove GCC"
    required: false
    default: "true"
  google-cloud-sdk:
    description: "Remove Google Cloud SDK"
    required: false
    default: "true"
  docker-images:
    description: "Remove Docker images"
    required: false
    default: "true"
  dotnet:
    description: "Remove .NET runtime"
    required: false
    default: "true"
  jvm:
    description: "Remove JVM runtime"
    required: false
    default: "true"
  julia:
    description: "Remove Julia runtime"
    required: false
    default: "true"
  haskell:
    description: "Remove Haskell runtime"
    required: false
    default: "true"
  heroku:
    description: "Remove Heroku"
    required: false
    default: "true"
  llvm:
    description: "Remove LLVM"
    required: false
    default: "true"
  mono:
    description: "Remove Mono runtime"
    required: false
    default: "true"
  mysql:
    description: "Remove MySQL"
    required: false
    default: "true"
  node:
    description: "Remove Node runtime"
    required: false
    default: "true"
  python:
    description: "Remove Python runtime"
    required: false
    default: "true"
  postgresql:
    description: "Remove PostgreSQL"
    required: false
    default: "true"
  powershell:
    description: "Remove Powershell runtime"
    required: false
    default: "true"
  ruby:
    description: "Remove Ruby runtime"
    required: false
    default: "true"
  rust:
    description: "Remove Rust runtime"
    required: false
    default: "true"
  snap:
    description: "Remove Snap"
    required: false
    default: "true"
  swift:
    description: "Remove Swift runtime"
    required: false
    default: "true"
  # option inspired by:
  # https://github.com/actions/virtual-environments/issues/2875#issuecomment-1163392159
  tool-cache:
    description: "Remove image tool cache"
    required: false
    default: "true"
  usrmisc:
    description: "Remove /usr/{,local}/share/{man,doc,icons}"
    required: false
    default: "true"

  # Disabled by default options

  usrlocal:
    description: "Remove /usr/local"
    required: false
    default: "false"
  opt:
    description: "Remove /opt"
    required: false
    default: "false"
  varcache:
    description: "Remove /var/cache"
    required: false
    default: "false"
  swap-storage:
    description: "Remove swap storage"
    required: false
    default: "false"
  debug:
    description: "Debug options, do not enable unless for testing purposes"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |

        # ======
        # MACROS
        # ======

        # macro to print a line of equals
        # (silly but works)
        printSeparationLine() {
          str=${1:=}
          num=${2:-80}
          counter=1
          output=""
          while [ $counter -le $num ]
          do
             output="${output}${str}"
             counter=$((counter+1))
          done
          echo "${output}"
        }

        # macro to compute available space
        # REF: https://unix.stackexchange.com/a/42049/60849
        # REF: https://stackoverflow.com/a/450821/408734
        getAvailableSpace() { echo $(df -a $1 | awk 'NR > 1 {avail+=$4} END {print avail}'); }

        # macro to make Kb human readable (assume the input is Kb)
        # REF: https://unix.stackexchange.com/a/44087/60849
        formatByteCount() { echo $(numfmt --to=iec-i --suffix=B --padding=7 $1'000'); }

        # macro to output saved space
        printSavedSpace() {
          saved=${1}
          title=${2:-}

          echo ""
          printSeparationLine '*' 80
          if [ ! -z "${title}" ]; then
            echo "=> ${title}: Saved $(formatByteCount $saved)"
          else
            echo "=> Saved $(formatByteCount $saved)"
          fi
          printSeparationLine '*' 80
          echo ""
        }

        # macro to print output of dh with caption
        printDH() {
          caption=${1:-}

          printSeparationLine '=' 80
          echo "${caption}"
          echo ''

          echo '$ dh -ha'
          df -ha
          echo ''

          echo '$ free -h'
          free -h
          echo ''

          # this is slow, this is why it is not enabled by default
          if [[ ${{ inputs.debug }} == 'true' ]]; then
            echo '$ du -h /* 2>/dev/null | sort -hr | head -n 100'
            # https://unix.stackexchange.com/a/355164
            sudo perl -e \
              '$SIG{PIPE}="DEFAULT"; exec "@ARGV"' \
              'du -h /* 2>/dev/null | sort -hr | head -n 100' || true
            echo ''
          fi
          printSeparationLine '=' 80
        }

        remove() {
          BEFORE=$(getAvailableSpace)

          sudo rm -rf ${@:2} || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "$1"
        }


        # ======
        # SCRIPT
        # ======

        # Display initial disk space stats

        AVAILABLE_INITIAL=$(getAvailableSpace)

        printDH "BEFORE CLEAN-UP:"
        echo ""

        # Clean-up

        if [[ ${{ inputs.android }} == 'true' ]]; then
          remove "Android library" /usr/local/lib/android &
        fi

        if [[ ${{ inputs.az }} == 'true' ]]; then
          remove "Az" /opt/az /usr/share/az* &
        fi

        if [[ ${{ inputs.aws-cli }} == 'true' ]]; then
          remove "AWS CLI" /usr/local/aws* &
        fi

        if [[ ${{ inputs.browsers }} == 'true' ]]; then
          remove "Browsers" \
            /opt/chrome \
            /opt/google/chrome \
            /usr/local/share/chromedriver* \
            /usr/local/share/chromium \
            /opt/microsoft/{edge,msedge} \
            /opt/msedge \
            /usr/local/share/edge_driver* \
            /usr/lib/firefox &
        fi

        if [[ ${{ inputs.gcc }} == 'true' ]]; then
          remove "GCC" /usr/lib/gcc /usr/libexec/gcc &
        fi

        if [[ ${{ inputs.google-cloud-sdk }} == 'true' ]]; then
          remove "Google Cloud SDK" /usr/lib/google-cloud-sdk &
        fi

        if [[ ${{ inputs.dotnet }} == 'true' ]]; then
          remove ".NET runtime" \
            /usr/share/dotnet \
            /usr/lib/dotnet \
            /home/{runner,runneradmin}/.dotnet \
            /etc/skel/.dotnet &
        fi

        if [[ ${{ inputs.jvm }} == 'true' ]]; then
          remove "JVM runtime" \
            /usr/lib/jvm \
            /usr/share/gradle* \
            /usr/share/java* \
            /usr/share/kotlin* \
            /usr/share/sbt* \
            /root/.sbt \
            /usr/local/lib/lein &
        fi

        if [[ ${{ inputs.julia }} == 'true' ]]; then
          remove "Julia runtime" /usr/local/julia* &
        fi

        if [[ ${{ inputs.haskell }} == 'true' ]]; then
          remove "Haskell runtime" /opt/ghc /usr/local/.ghcup &
        fi

        if [[ ${{ inputs.heroku }} == 'true' ]]; then
          remove "Heroku" /usr/lib/heroku &
        fi

        if [[ ${{ inputs.llvm }} == 'true' ]]; then
          remove "LLVM" \
            /usr/lib/llvm* \
            /usr/include/llvm* \
            /usr/lib/*-linux-gnu/libLLVM* \
            /usr/lib/*-linux-gnu/libclang* \
            /usr/lib/*-linux-gnu/liblldb* &
        fi

        if [[ ${{ inputs.mono }} == 'true' ]]; then
          remove "Mono runtime" /usr/lib/mono &
        fi

        if [[ ${{ inputs.mysql }} == 'true' ]]; then
        {
          sudo systemctl stop mysql -q || true
          remove "MySQL" /var/lib/mysql/
        }&
        fi

        if [[ ${{ inputs.node }} == 'true' ]]; then
          remove "Node runtime" \
            /usr/local/n \
            /usr/local/lib/node_modules \
            /usr/local/include/node &
        fi

        if [[ ${{ inputs.python }} == 'true' ]]; then
          remove "Python runtime" /opt/pipx /usr/share/miniconda &
        fi

        if [[ ${{ inputs.postgresql }} == 'true' ]]; then
        {
          sudo systemctl stop postgresql -q || true
          remove "PostgreSQL" /usr/lib/postgresql /var/lib/postgresql
        }&
        fi

        if [[ ${{ inputs.powershell }} == 'true' ]]; then
          remove "Powershell runtime" /usr/local/share/powershell /opt/microsoft/powershell &
        fi

        if [[ ${{ inputs.ruby }} == 'true' ]]; then
          remove "Ruby runtime" \
            /usr/lib/ruby \
            /var/lib/gems \
            /home/linuxbrew/.linuxbrew \
            /usr/share/ri &
        fi

        if [[ ${{ inputs.rust }} == 'true' ]]; then
          remove "Rust runtime" \
            /home/{runner,runneradmin}/{.cargo,.rustup} \
            /etc/skel/{.cargo,.rustup} &
        fi

        if [[ ${{ inputs.snap }} == 'true' ]]; then
        {
          sudo systemctl stop snapd.service -q || true
          sudo umount --recursive /snap/*/* -q || true
          remove "Snap" ~/snap /snap /var/snap /var/lib/snapd /usr/lib/snapd
        }&
        fi

        if [[ ${{ inputs.swift }} == 'true' ]]; then
          remove "Swift runtime" /usr/share/swift &
        fi

        if [[ ${{ inputs.tool-cache }} == 'true' ]]; then
          remove "Tool cache" "$AGENT_TOOLSDIRECTORY"
        fi

        if [[ ${{ inputs.usrmisc }} == 'true' ]]; then
          remove "/usr/src and /usr/{,local}/share/{man,doc,icons}" \
            /usr/src \
            /usr/share/{man,doc,icons} \
            /usr/local/{man,doc,icons} \
            /usr/local/share/{man,doc,icons} &
        fi

        if [[ ${{ inputs.usrlocal }} == 'true' ]]; then
          remove "/usr/local" /usr/local &
        fi

        if [[ ${{ inputs.opt }} == 'true' ]]; then
          remove "/opt" /opt &
        fi

        if [[ ${{ inputs.varcache }} == 'true' ]]; then
          remove "/var/cache" /var/cache &
        fi

        if [[ ${{ inputs.docker-images }} == 'true' ]]; then
        {
          BEFORE=$(getAvailableSpace)

          sudo docker image prune --all --force &>/dev/null || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Docker images"
        }&
        fi

        if [[ ${{ inputs.swap-storage }} == 'true' ]]; then
        {
          sudo swapoff -a || true
          remove "Swap storage" /mnt/swapfile
        }&
        fi

        # Wait until all background jobs finishes
        wait $(jobs -rp)

        # Output saved space statistic

        AVAILABLE_END=$(getAvailableSpace)

        echo ""
        printDH "AFTER CLEAN-UP:"
        echo ""

        printSavedSpace $((AVAILABLE_END - AVAILABLE_INITIAL))
