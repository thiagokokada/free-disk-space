name: "Free Disk Space (Ubuntu)"
description: "A configurable GitHub Action to free up disk space on an Ubuntu GitHub Actions runner."

# See: https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#branding
branding:
  icon: "trash-2"
  color: "green"

inputs:
  android:
    description: "Remove Android runtime"
    required: false
    default: "true"
  gcc:
    description: "Remove GCC"
    required: false
    default: "true"
  google-cloud-sdk:
    description: "Remove Google Cloud SDK"
    required: false
    default: "true"
  docker-images:
    description: "Remove Docker images"
    required: false
    default: "true"
  dotnet:
    description: "Remove .NET runtime"
    required: false
    default: "true"
  jvm:
    description: "Remove JVM runtime"
    required: false
    default: "true"
  haskell:
    description: "Remove Haskell runtime"
    required: false
    default: "true"
  llvm:
    description: "Remove LLVM"
    required: false
    default: "true"
  miniconda:
    description: "Remove Miniconda runtime"
    required: false
    default: "true"
  mono:
    description: "Remove Mono runtime"
    required: false
    default: "true"
  rust:
    description: "Remove Rust runtime"
    required: false
    default: "true"
  swift:
    description: "Remove Swift runtime"
    required: false
    default: "true"
  # option inspired by:
  # https://github.com/actions/virtual-environments/issues/2875#issuecomment-1163392159
  tool-cache:
    description: "Remove image tool cache"
    required: false
    default: "true"

  # Disabled by default options

  usrlocal:
    description: "Remove /usr/local"
    required: false
    default: "false"
  opt:
    description: "Remove /opt"
    required: false
    default: "false"
  swap-storage:
    description: "Remove swap storage"
    required: false
    default: "false"
  debug:
    description: "Debug options, do not enable unless for testing purposes"
    required: false
    default: "false"

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |

        # ======
        # MACROS
        # ======

        # macro to print a line of equals
        # (silly but works)
        printSeparationLine() {
          str=${1:=}
          num=${2:-80}
          counter=1
          output=""
          while [ $counter -le $num ]
          do
             output="${output}${str}"
             counter=$((counter+1))
          done
          echo "${output}"
        }

        # macro to compute available space
        # REF: https://unix.stackexchange.com/a/42049/60849
        # REF: https://stackoverflow.com/a/450821/408734
        getAvailableSpace() { echo $(df -a $1 | awk 'NR > 1 {avail+=$4} END {print avail}'); }

        # macro to make Kb human readable (assume the input is Kb)
        # REF: https://unix.stackexchange.com/a/44087/60849
        formatByteCount() { echo $(numfmt --to=iec-i --suffix=B --padding=7 $1'000'); }

        # macro to output saved space
        printSavedSpace() {
          saved=${1}
          title=${2:-}

          echo ""
          printSeparationLine '*' 80
          if [ ! -z "${title}" ]; then
            echo "=> ${title}: Saved $(formatByteCount $saved)"
          else
            echo "=> Saved $(formatByteCount $saved)"
          fi
          printSeparationLine '*' 80
          echo ""
        }

        # macro to print output of dh with caption
        printDH() {
          caption=${1:-}

          printSeparationLine '=' 80
          echo "${caption}"
          echo ''

          echo '$ dh -ha'
          df -ha
          echo ''

          # this is slow, this is why it is not enabled by default
          if [[ ${{ inputs.debug }} == 'true' ]]; then
            echo '$ du -h /* 2>/dev/null | sort -hr | head -n 50'
            # https://unix.stackexchange.com/a/355164
            sudo perl -e \
              '$SIG{PIPE}="DEFAULT"; exec "@ARGV"' \
              'du -h /* 2>/dev/null | sort -hr | head -n 50' || true
            echo ''
          fi
          printSeparationLine '=' 80
        }



        # ======
        # SCRIPT
        # ======

        # Display initial disk space stats

        AVAILABLE_INITIAL=$(getAvailableSpace)

        printDH "BEFORE CLEAN-UP:"
        echo ""

        # Clean-up

        if [[ ${{ inputs.android }} == 'true' ]]; then
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /usr/local/lib/android || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Android library"
        fi

        if [[ ${{ inputs.gcc }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /usr/lib/gcc || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "GCC"
        )&
        fi

        if [[ ${{ inputs.google-cloud-sdk }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /usr/lib/google-cloud-sdk || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "GCC"
        )&
        fi

        if [[ ${{ inputs.dotnet }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          # https://github.community/t/bigger-github-hosted-runners-disk-space/17267/11
          sudo rm -rf /usr/share/dotnet || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED ".NET runtime"
        )&
        fi

        if [[ ${{ inputs.jvm }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /usr/lib/jvm || true
          sudo rm -rf /usr/share/gradle* || true
          sudo rm -rf /root/.sbt || true
          sudo rm -rf /usr/share/sbt || true
          sudo rm -rf /usr/local/lib/lein || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "JVM runtime"
        )&
        fi

        if [[ ${{ inputs.miniconda }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /usr/share/miniconda || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Miniconda runtime"
        )&
        fi

        if [[ ${{ inputs.mono }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /usr/lib/mono || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Mono runtime"
        )&
        fi

        if [[ ${{ inputs.haskell }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /opt/ghc || true
          sudo rm -rf /usr/local/.ghcup || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Haskell runtime"
        )&
        fi

        if [[ ${{ inputs.llvm }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /usr/lib/llvm* || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Haskell runtime"
        )&
        fi

        if [[ ${{ inputs.swift }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /usr/share/swift || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Swift runtime"
        )&
        fi

        if [[ ${{ inputs.rust }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /home/runner/.cargo || true
          sudo rm -rf /home/runner/.rustup || true
          sudo rm -rf /home/runneradmin/.cargo || true
          sudo rm -rf /home/runneradmin/.rustup || true
          sudo rm -rf /etc/skel/.rustup || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Rust runtime"
        )&
        fi

        if [[ ${{ inputs.usrlocal }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /usr/local || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "/usr/local"
        )&
        fi

        if [[ ${{ inputs.opt }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf /opt || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "/opt"
        )&
        fi

        if [[ ${{ inputs.docker-images }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo docker image prune --all --force &>/dev/null || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Docker images"
        )&
        fi

        if [[ ${{ inputs.tool-cache }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo rm -rf "$AGENT_TOOLSDIRECTORY" || true

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Tool cache"
        )&
        fi

        if [[ ${{ inputs.swap-storage }} == 'true' ]]; then
        (
          BEFORE=$(getAvailableSpace)

          sudo swapoff -a || true
          sudo rm -f /mnt/swapfile || true
          free -h

          AFTER=$(getAvailableSpace)
          SAVED=$((AFTER-BEFORE))
          printSavedSpace $SAVED "Swap storage"
        )&
        fi

        # Wait until all background jobs finishes
        wait $(jobs -rp)

        # Output saved space statistic

        AVAILABLE_END=$(getAvailableSpace)

        echo ""
        printDH "AFTER CLEAN-UP:"
        echo ""

        printSavedSpace $((AVAILABLE_END - AVAILABLE_INITIAL))
